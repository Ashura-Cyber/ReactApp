{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\tests1\\\\react-start\\\\src\\\\CurrencyConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyConverter = ({\n  priceInRub\n}) => {\n  _s();\n  const [exchangeRates, setExchangeRates] = useState({});\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Запрос к API для получения курсов валют\n    const fetchExchangeRates = async () => {\n      try {\n        const response = await fetch(`https://v6.exchangerate-api.com/v6/YOUR_API_KEY/latest/RUB`);\n        const data = await response.json();\n        setExchangeRates(data.conversion_rates);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching exchange rates:', error);\n        setLoading(false);\n      }\n    };\n    fetchExchangeRates();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043A\\u0443\\u0440\\u0441\\u043E\\u0432 \\u0432\\u0430\\u043B\\u044E\\u0442...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  const convertCurrency = (priceInRub, currency) => {\n    if (exchangeRates[currency]) {\n      return (priceInRub * exchangeRates[currency]).toFixed(2);\n    }\n    return priceInRub.toFixed(2); // Если нет курса, возвращаем цену в рублях\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"currency\",\n      children: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0432\\u0430\\u043B\\u044E\\u0442\\u0443:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"currency\",\n      value: selectedCurrency,\n      onChange: e => setSelectedCurrency(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"USD\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EUR\",\n        children: \"EUR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"RUB\",\n        children: \"RUB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0426\\u0435\\u043D\\u0430: \", selectedCurrency === 'RUB' ? `${priceInRub} руб` : `${convertCurrency(priceInRub, selectedCurrency)} ${selectedCurrency}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencyConverter, \"/yZSZqT0ECc6/57lfwP+rwpzK0k=\");\n_c = CurrencyConverter;\nexport default CurrencyConverter;\nvar _c;\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CurrencyConverter","priceInRub","_s","exchangeRates","setExchangeRates","selectedCurrency","setSelectedCurrency","loading","setLoading","fetchExchangeRates","response","fetch","data","json","conversion_rates","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","convertCurrency","currency","toFixed","htmlFor","id","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Work/tests1/react-start/src/CurrencyConverter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst CurrencyConverter = ({ priceInRub }) => {\r\n  const [exchangeRates, setExchangeRates] = useState({});\r\n  const [selectedCurrency, setSelectedCurrency] = useState('USD');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Запрос к API для получения курсов валют\r\n    const fetchExchangeRates = async () => {\r\n      try {\r\n        const response = await fetch(`https://v6.exchangerate-api.com/v6/YOUR_API_KEY/latest/RUB`);\r\n        const data = await response.json();\r\n        setExchangeRates(data.conversion_rates);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching exchange rates:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchExchangeRates();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p>Загрузка курсов валют...</p>;\r\n  }\r\n\r\n  const convertCurrency = (priceInRub, currency) => {\r\n    if (exchangeRates[currency]) {\r\n      return (priceInRub * exchangeRates[currency]).toFixed(2);\r\n    }\r\n    return priceInRub.toFixed(2); // Если нет курса, возвращаем цену в рублях\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"currency\">Выберите валюту:</label>\r\n      <select\r\n        id=\"currency\"\r\n        value={selectedCurrency}\r\n        onChange={(e) => setSelectedCurrency(e.target.value)}\r\n      >\r\n        <option value=\"USD\">USD</option>\r\n        <option value=\"EUR\">EUR</option>\r\n        <option value=\"RUB\">RUB</option>\r\n      </select>\r\n\r\n      <p>\r\n        Цена: {selectedCurrency === 'RUB' ? `${priceInRub} руб` : `${convertCurrency(priceInRub, selectedCurrency)} ${selectedCurrency}`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}