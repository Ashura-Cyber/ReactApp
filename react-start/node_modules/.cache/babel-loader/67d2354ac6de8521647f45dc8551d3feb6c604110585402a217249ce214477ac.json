{"ast":null,"code":"var _jsxFileName = \"C:\\\\Work\\\\tests1\\\\react-start\\\\src\\\\CurrencyConverter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencyConverter = ({\n  priceInRub,\n  selectedCurrency\n}) => {\n  _s();\n  const [exchangeRates, setExchangeRates] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Запрос к API для получения курсов валют\n    const fetchExchangeRates = async () => {\n      try {\n        const response = await fetch(`https://v6.exchangerate-api.com/v6/YOUR_API_KEY/latest/RUB`);\n        const data = await response.json();\n        setExchangeRates(data.conversion_rates);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching exchange rates:', error);\n        setLoading(false);\n      }\n    };\n    fetchExchangeRates();\n  }, [selectedCurrency]); // При изменении выбранной валюты обновляем курсы\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u043A\\u0443\\u0440\\u0441\\u043E\\u0432 \\u0432\\u0430\\u043B\\u044E\\u0442...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Функция для конвертации из RUB в выбранную валюту\n  const convertCurrency = (priceInRub, currency) => {\n    if (exchangeRates[currency]) {\n      return (priceInRub * exchangeRates[currency]).toFixed(2);\n    }\n    return priceInRub.toFixed(2); // Если нет курса, возвращаем цену в рублях\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u0426\\u0435\\u043D\\u0430: \", selectedCurrency === 'RUB' ? `${priceInRub} руб` : `${convertCurrency(priceInRub, selectedCurrency)} ${selectedCurrency}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencyConverter, \"bOgvPaFFZstp8+6byaa0mzK2XQs=\");\n_c = CurrencyConverter;\nexport default CurrencyConverter;\nvar _c;\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CurrencyConverter","priceInRub","selectedCurrency","_s","exchangeRates","setExchangeRates","loading","setLoading","fetchExchangeRates","response","fetch","data","json","conversion_rates","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","convertCurrency","currency","toFixed","_c","$RefreshReg$"],"sources":["C:/Work/tests1/react-start/src/CurrencyConverter.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst CurrencyConverter = ({ priceInRub, selectedCurrency }) => {\r\n  const [exchangeRates, setExchangeRates] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Запрос к API для получения курсов валют\r\n    const fetchExchangeRates = async () => {\r\n      try {\r\n        const response = await fetch(`https://v6.exchangerate-api.com/v6/YOUR_API_KEY/latest/RUB`);\r\n        const data = await response.json();\r\n        setExchangeRates(data.conversion_rates);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching exchange rates:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchExchangeRates();\r\n  }, [selectedCurrency]); // При изменении выбранной валюты обновляем курсы\r\n\r\n  if (loading) {\r\n    return <p>Загрузка курсов валют...</p>;\r\n  }\r\n\r\n  // Функция для конвертации из RUB в выбранную валюту\r\n  const convertCurrency = (priceInRub, currency) => {\r\n    if (exchangeRates[currency]) {\r\n      return (priceInRub * exchangeRates[currency]).toFixed(2);\r\n    }\r\n    return priceInRub.toFixed(2); // Если нет курса, возвращаем цену в рублях\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Цена: {selectedCurrency === 'RUB' ? `${priceInRub} руб` : `${convertCurrency(priceInRub, selectedCurrency)} ${selectedCurrency}`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyConverter;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAiB,CAAC,KAAK;EAAAC,EAAA;EAC9D,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4D,CAAC;QAC1F,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCP,gBAAgB,CAACM,IAAI,CAACE,gBAAgB,CAAC;QACvCN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACtDP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACN,gBAAgB,CAAC,CAAC,CAAC,CAAC;;EAExB,IAAII,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAAiB,QAAA,EAAG;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACxC;;EAEA;EACA,MAAMC,eAAe,GAAGA,CAACpB,UAAU,EAAEqB,QAAQ,KAAK;IAChD,IAAIlB,aAAa,CAACkB,QAAQ,CAAC,EAAE;MAC3B,OAAO,CAACrB,UAAU,GAAGG,aAAa,CAACkB,QAAQ,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC;IAC1D;IACA,OAAOtB,UAAU,CAACsB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,oBACExB,OAAA;IAAAiB,QAAA,eACEjB,OAAA;MAAAiB,QAAA,GAAG,4BACK,EAACd,gBAAgB,KAAK,KAAK,GAAG,GAAGD,UAAU,MAAM,GAAG,GAAGoB,eAAe,CAACpB,UAAU,EAAEC,gBAAgB,CAAC,IAAIA,gBAAgB,EAAE;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/H;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACjB,EAAA,CAxCIH,iBAAiB;AAAAwB,EAAA,GAAjBxB,iBAAiB;AA0CvB,eAAeA,iBAAiB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}